  -- Combining DATA across accounts and emails
WITH
  union_data AS ( -- Calculation OF metrics by account
  SELECT
    date,
    country,
    send_interval,
    is_verified,
    is_unsubscribed,
    COUNT (DISTINCT acs.account_id) AS account_cnt,
    0 AS sent_msg,
    0 AS open_msg,
    0 AS visit_msg
  FROM
    data-analytics-mate.DA.account_session acs
  JOIN
    data-analytics-mate.DA.account a
  ON
    acs.account_id = a.id
  JOIN
    data-analytics-mate.DA.session s
  ON
    acs.ga_session_id= s.ga_session_id
  JOIN
    data-analytics-mate.DA.session_params sp
  ON
    acs.ga_session_id= sp.ga_session_id
  GROUP BY
    date,
    country,
    send_interval,
    is_verified,
    is_unsubscribed
  UNION ALL
    -- Calculation of metrics by email
  SELECT
    DATE_ADD(s.date, INTERVAL es.sent_date DAY) AS date,
    country,
    send_interval,
    is_verified,
    is_unsubscribed,
    0 AS account_cnt,
    COUNT (DISTINCT es.id_message) AS sent_msg,
    COUNT (DISTINCT eo.id_message) AS open_msg,
    COUNT (DISTINCT ev.id_message) AS visit_msg
  FROM
    data-analytics-mate.DA.email_sent es
  LEFT JOIN
    data-analytics-mate.DA.email_open eo
  ON
    es.id_message = eo.id_message
  LEFT JOIN
    data-analytics-mate.DA.email_visit ev
  ON
    es.id_message = ev.id_message
  JOIN
    data-analytics-mate.DA.account_session acs
  ON
    es.id_account = acs.account_id
  JOIN
    data-analytics-mate.DA.session s
  ON
    acs.ga_session_id = s.ga_session_id
  JOIN
    data-analytics-mate.DA.session_params sp
  ON
    s.ga_session_id = sp.ga_session_id
  JOIN
    data-analytics-mate.DA.account a
  ON
    es.id_account = a.id
  GROUP BY
    date,
    country,
    send_interval,
    is_verified,
    is_unsubscribed ),
  -- Aggregation of merged data
   aggregated_data AS (
SELECT
  date,
  country,
  send_interval,
  is_verified,
  is_unsubscribed,
  SUM(account_cnt)AS account_cnt,
  SUM (sent_msg) AS sent_msg,
  SUM(open_msg) AS open_msg,
  SUM(visit_msg) AS visit_msg,
  SUM (SUM(account_cnt)) OVER (PARTITION BY country) AS total_country_account_cnt,
  SUM (SUM (sent_msg)) OVER (PARTITION BY country) AS total_country_sent_cnt
FROM
  union_data
GROUP BY
  date,
  country,
  send_interval,
  is_verified,
  is_unsubscribed ),
  --Ranking 
  data_rank AS (
SELECT
  *,
  DENSE_RANK() OVER (ORDER BY total_country_account_cnt DESC) AS rank_total_country_account_cnt,
  DENSE_RANK() OVER (ORDER BY total_country_sent_cnt DESC) AS rank_total_country_sent_cnt
FROM
  aggregated_data) 
  --Summary and filtered data by rank
SELECT
  *
FROM
  data_rank
WHERE
  rank_total_country_account_cnt <= 10
  OR rank_total_country_sent_cnt <= 10
